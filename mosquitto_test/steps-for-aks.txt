Acloud guru link:
https://learn.acloud.guru/handson/54ec2924-5f56-4c38-a11f-be6375bc8b4d
https://www.youtube.com/watch?v=FAnQTgr04mU&t=339s

AKS
===
ssh-keygen -t rsa -b 1024 (Overwrite the existing keys)
az group list 
ResourceGroup=491-5aa87ef0-deploying-and-accessing-an-applicatio  #This would be the variable which consists the group name
az aks create --resource-group $ResourceGroup --name Cluster01 --node-count 3 --generate-ssh-keys --node-vm-size Standard_B2s --enable-managed-identity
az aks get-credentials --name Cluster01 --resource-group $ResourceGroup

mkdir K8sdemo
cd K8sdemo

touch mosquitto-no-vol.yaml
touch config-file.yaml
touch secret-file.yaml

kubectl exec -it mosquitto-5f79855884-2rw2w -- /bin/sh
cd mosquitto/config
cat mosquitto.conf

kubectl apply -f mosquitto-no-vol.yaml
kubectl apply -f config-file.yaml
kubectl apply -f secret-file.yaml

kubectl apply -f mosquitto-vol.yaml
kubectl exec -it mosquitto-5f79855884-2rw2w -- /bin/sh
cd mosquitto/secret

=================================
=================================

Create AKS Cluster
=================================
Create just the cluster, without any integrations with Azure Monitor, or Azure Policy.
You can use either the provided Service principal or a System-assigned managed identity.
The cluster can be created with the Azure Portal, CLI, PowerShell, or ARM template.

Deploy the Application
=================================
Create a deployment to include two replicas of the application. The deployment can be applied in the Azure Portal or with the Azure Cloud Shell.
The application should use the NGINX public Docker Hub image.
Include resource minimum and maximum limits.

Access the Application Externally
=================================
Add a LoadBalancer service to generate an external IP. The service can be added in the Azure Portal, or with the Azure Cloud Shell using the kubectl command line tool.
Confirm access to the application using the external IP.